/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef helloworld_TYPES_H
#define helloworld_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace HelloWorldService {

class hello;

typedef struct _hello__isset {
  _hello__isset() : number(false), first_Name(false), last_Name(false), age(false) {}
  bool number :1;
  bool first_Name :1;
  bool last_Name :1;
  bool age :1;
} _hello__isset;

class hello : public virtual ::apache::thrift::TBase {
 public:

  hello(const hello&);
  hello& operator=(const hello&);
  hello() : number(0), first_Name(), last_Name(), age(0) {
  }

  virtual ~hello() throw();
  int32_t number;
  std::string first_Name;
  std::string last_Name;
  int32_t age;

  _hello__isset __isset;

  void __set_number(const int32_t val);

  void __set_first_Name(const std::string& val);

  void __set_last_Name(const std::string& val);

  void __set_age(const int32_t val);

  bool operator == (const hello & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(first_Name == rhs.first_Name))
      return false;
    if (!(last_Name == rhs.last_Name))
      return false;
    if (!(age == rhs.age))
      return false;
    return true;
  }
  bool operator != (const hello &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const hello & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(hello &a, hello &b);

std::ostream& operator<<(std::ostream& out, const hello& obj);

} // namespace

#endif
